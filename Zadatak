#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_CHAIRS 5
#define NUM_CUSTOMERS 20

sem_t sem_barber;               // Semaphore for barber
sem_t sem_customer;             // Semaphore for customer
sem_t sem_mutex;                // Semaphore for mutex

int num_customers_waiting = 0;   // Number of customers currently waiting

void *barber(void *arg) {
    while (1) {
        sem_wait(&sem_customer);  // Wait for a customer to arrive
        sem_wait(&sem_mutex);     // Acquire the mutex to modify the shared variable
        
        num_customers_waiting--;
        
        sem_post(&sem_barber);    // Signal that the barber is ready to cut hair
        sem_post(&sem_mutex);     // Release the mutex
        
        printf("Barber is cutting hair.\n");
        
        // Simulate hair cutting time
        sleep(rand() % 5);
    }
    return NULL;
}

void *customer(void *arg) {
    int id = *((int *)arg);
    
    sem_wait(&sem_mutex);         // Acquire the mutex to modify the shared variable
    
    if (num_customers_waiting < NUM_CHAIRS) {
        num_customers_waiting++;
        
        sem_post(&sem_customer);  // Signal that a customer has arrived
        sem_post(&sem_mutex);     // Release the mutex
        
        sem_wait(&sem_barber);    // Wait for the barber to be ready
        
        printf("Customer %d is getting a haircut.\n", id);
        
        // Simulate hair cutting time
        sleep(rand() % 5);
        
        printf("Customer %d has finished haircut.\n", id);
    } else {
        sem_post(&sem_mutex);     // Release the mutex
        
        printf("Customer %d has found the barbershop full and leaves.\n", id);
    }
    
    return NULL;
}

int main() {
    pthread_t barber_thread;
    pthread_t customer_threads[NUM_CUSTOMERS];
    int i, id[NUM_CUSTOMERS];
    
    sem_init(&sem_barber, 0, 0);
    sem_init(&sem_customer, 0, 0);
    sem_init(&sem_mutex, 0, 1);
    
    // Create the barber thread
    pthread_create(&barber_thread, NULL, barber, NULL);
    
    // Create the customer threads
    for (i = 0; i < NUM_CUSTOMERS; i++) {
        id[i] = i + 1;
        pthread_create(&customer_threads[i], NULL, customer, &id[i]);
        sleep(rand() % 3);  // Simulate arrival time of customers
    }
    
    // Wait for the barber thread to finish
    pthread_join(barber_thread, NULL);
    
    // Wait for the customer threads to finish
    for (i = 0; i < NUM_CUSTOMERS; i++) {
        pthread_join(customer_threads[i], NULL);
    }
    
    return 0;
}
